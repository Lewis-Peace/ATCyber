#ifndef DES_APPROXIMATIONS
#define DES_APPROXIMATIONS

#include <vector>

using std::vector;

vector<vector<int>> plain_masks = {
    {32+5, 32+11, 32+17, 32+27, 3},      // CH[5,11,17,27] + CL[3] + PH[5,11,17,27] + PL[3] = K1[4] + K3[4]
    {32+25, 32+10, 32+20, 32+0, 7},      // CH[5,11,17,27] + CL[7] + PH[5,11,17,27] + PL[7] = K1[10] + K3[10]
    {32+3, 32+21, 32+28, 32+13, 11},     // CH[5,11,17,27] + CL[11] + PH[5,11,17,27] + PL[11] = K1[16] + K3[16]
    {32+7, 32+18, 32+24, 32+29, 15},     // CH[5,11,17,27] + CL[15] + PH[5,11,17,27] + PL[15] = K1[22] + K3[22]
    {32+6, 32+12, 32+22, 32+31, 19},     // CH[5,11,17,27] + CL[19] + PH[5,11,17,27] + PL[19] = K1[28] + K3[28]
    {32+26, 32+2, 32+16, 32+8, 23},      // CH[5,11,17,27] + CL[23] + PH[5,11,17,27] + PL[23] = K1[34] + K3[34]
    {32+14, 32+30, 32+4, 32+19, 27},     // CH[5,11,17,27] + CL[27] + PH[5,11,17,27] + PL[27] = K1[40] + K3[40]

    {32+5, 32+11, 32+17, 32+27, 4,0},    // CH[5,11,17,27] + CL[0,4] + PH[5,11,17,27] + PL[0,4] = K1[5,1] + K3[5,1]
    {32+25, 32+10, 32+20, 32+0, 8,4},    // CH[5,11,17,27] + CL[4,8] + PH[5,11,17,27] + PL[4,8] = K1[11,7] + K3[11,7]
    {32+3, 32+21, 32+28, 32+13, 8,12},   // CH[5,11,17,27] + CL[8,12] + PH[5,11,17,27] + PL[8,12] = K1[17,13] + K3[17,13]
    {32+7, 32+18, 32+24, 32+29, 12,16},  // CH[5,11,17,27] + CL[12,16] + PH[5,11,17,27] + PL[12,16] = K1[23,19] + K3[23,19]
    {32+6, 32+12, 32+22, 32+31, 16,20},  // CH[5,11,17,27] + CL[16,20] + PH[5,11,17,27] + PL[16,20] = K1[25,29] + K3[25,29]
    {32+26, 32+2, 32+16, 32+8,  20,24},  // CH[5,11,17,27] + CL[20,24] + PH[5,11,17,27] + PL[20,24] = K1[41,37] + K3[41,37]
    {32+14, 32+30, 32+4, 32+19, 24,28},   // CH[5,11,17,27] + CL[24,28] + PH[5,11,17,27] + PL[24,28] = K1[47,43] + K3[47,43]
    
    //{32+27,32+17, 31,0,1,3},
    //{32+7,32+5, 5,4,3,8}
    };
vector<vector<int>> cipher_masks = {
    {32+5, 32+11, 32+17, 32+27, 3},      // CH[5,11,17,27] + CL[3] + PH[5,11,17,27] + PL[3] = K1[4] + K3[4]
    {32+25, 32+10, 32+20, 32+0, 7},      // CH[5,11,17,27] + CL[7] + PH[5,11,17,27] + PL[7] = K1[10] + K3[10]
    {32+3, 32+21, 32+28, 32+13, 11},     // CH[5,11,17,27] + CL[11] + PH[5,11,17,27] + PL[11] = K1[16] + K3[16]
    {32+7, 32+18, 32+24, 32+29, 15},     // CH[5,11,17,27] + CL[15] + PH[5,11,17,27] + PL[15] = K1[22] + K3[22]
    {32+6, 32+12, 32+22, 32+31, 19},     // CH[5,11,17,27] + CL[19] + PH[5,11,17,27] + PL[19] = K1[28] + K3[28]
    {32+26, 32+2, 32+16, 32+8,  23},     // CH[5,11,17,27] + CL[23] + PH[5,11,17,27] + PL[23] = K1[34] + K3[34]
    {32+14, 32+30, 32+4, 32+19, 27},     // CH[5,11,17,27] + CL[27] + PH[5,11,17,27] + PL[27] = K1[40] + K3[40]

    {32+5, 32+11, 32+17, 32+27, 4,0},    // CH[5,11,17,27] + CL[0,4] + PH[5,11,17,27] + PL[0,4] = K1[5,1] + K3[5,1]
    {32+25, 32+10, 32+20, 32+0, 8,4},    // CH[5,11,17,27] + CL[4,8] + PH[5,11,17,27] + PL[4,8] = K1[11,7] + K3[11,7]
    {32+3, 32+21, 32+28, 32+13, 8,12},   // CH[5,11,17,27] + CL[8,12] + PH[5,11,17,27] + PL[8,12] = K1[17,13] + K3[17,13]
    {32+7, 32+18, 32+24, 32+29, 12,16},  // CH[5,11,17,27] + CL[12,16] + PH[5,11,17,27] + PL[12,16] = K1[23,19] + K3[23,19]
    {32+6, 32+12, 32+22, 32+31, 16,20},  // CH[5,11,17,27] + CL[16,20] + PH[5,11,17,27] + PL[16,20] = K1[25,29] + K3[25,29]
    {32+26, 32+2, 32+16, 32+8,  20,24},  // CH[5,11,17,27] + CL[20,24] + PH[5,11,17,27] + PL[20,24] = K1[41,37] + K3[41,37]
    {32+14, 32+30, 32+4, 32+19, 24,28},   // CH[5,11,17,27] + CL[24,28] + PH[5,11,17,27] + PL[24,28] = K1[47,43] + K3[47,43]

    //{32+27,32+17, 31,0,1,3},
    //{32+7,32+5, 5,4,3,8}
    };

vector<float> probabilities = {0.7,0.7,0.7,0.7,0.7,0.7,0.7, 0.5703125,0.5703125,0.5703125,0.5703125,0.5703125,0.5703125,0.5703125, 0.6953125,0.6953125};
    
vector<vector<int>> key_bits_influenced = {
    {13,10},
    {6,3},
    {15,12},
    {3,0},
    {48,45},
    {36,33},
    {55,52},

    {26,23,9,6},
    {21,11,18,8},
    {22,25,19,22},
    {8,5,14,11},
    {42,39,39,36},
    {29,32,29,54},
    {34,31,52,49},
    {54,51,41,38},

    //{9,6,19,16,26,23,23,20},
    //{11,8,27,24,21,18,2,27}
};

/**
 * @brief The array that will be filled with vectors. Those ones are composed with the result of the xor and the 
 * key indexes that are used to get the xor value.
 * 
 */
vector<vector<int>> key_approximations = {

};

#endif // DES_APPROXIMATIONS