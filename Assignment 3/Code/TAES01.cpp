/**

This is a C implementation for the the TC01 cipher. 

The key scheduling is not included. You should write a program for generating round keys from a given 64 bit key 

author: arnab roy 

 **/



#include <iostream>
#include <cstdint>
#include <cstring>

#define MASTER_KEY {7,0xd6,9,3, 1,0xfF,0xA,0xC, 9,0xD,0xA,0xB, 2,0xB,3,0x6}

#define rounds 2

// The lookup-tables are marked const so they can be placed in read-only storage instead of RAM
// The numbers below can be computed dynamically trading ROM for RAM - 
// This can be useful in (embedded) bootloader applications, where ROM is often limited.
static const uint8_t sbox[256] = {
  //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

static const uint8_t inverse_sbox[256] = {
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };


void add_roundkey(uint8_t* state, uint8_t* rkey)
{

  for(int i = 0;i < 16;i++)
    state[i] ^= rkey[i];

}

/*
An array of plaintext or state say A[0], ... , A[15] is mapped to a 4 X 4 matrix as

   A[0] A[1] A[2] A[3]
   A[4] ... 

   A[12] ...     A[15]

*/


void mixcol(uint8_t* state)
{

  uint8_t temp[16];

  temp[0] = state[0]^state[8]; temp[1] = state[1]^state[9]; temp[2] = state[2]^state[10]; temp[3] = state[3]^state[11];
  temp[4] = state[4]^state[8]; temp[5] = state[5]^state[9]; temp[6] = state[6]^state[10]; temp[7] = state[7]^state[11];
  temp[8] = state[0]; temp[9] = state[1]; temp[10] = state[2]; temp[11] = state[3];
  temp[12] = state[8]^state[12]; temp[13] = state[9]^state[13]; temp[14] = state[10]^state[14]; temp[15] = state[11]^state[15];

  memcpy(state, temp, 16*sizeof(uint8_t));

}

void inverse_mixcol(uint8_t* state)
{

  uint8_t temp[16];

  temp[0] = state[8]; temp[1] = state[9]; temp[2] = state[10]; temp[3] = state[11];
  temp[4] = state[0]^state[4]^state[8]; temp[5] = state[1]^state[5]^state[9]; temp[6] = state[2]^state[6]^state[10]; temp[7] = state[3]^state[7]^state[11];
  temp[8] = state[0]^state[8]; temp[9] = state[9]^state[1]; temp[10] = state[10]^state[2]; temp[11] = state[11]^state[3];
  temp[12] = state[0]^state[8]^state[12]; temp[13] = state[1]^state[9]^state[13]; temp[14] = state[2]^state[10]^state[14]; temp[15] = state[3]^state[11]^state[15];

  memcpy(state, temp, 16*sizeof(uint8_t));

}


void shift_row(uint8_t* state)
{

  uint8_t temp[16];
  int i;
  for(i = 0;i < 4;i++)
    temp[i] = state[i];

  temp[4] = state[5];
  temp[5] = state[6];
  temp[6] = state[7];
  temp[7] = state[4];

  temp[8] = state[10];
  temp[9] = state[11];
  temp[10] = state[8];
  temp[11] = state[9];

  temp[12] = state[15];
  temp[13] = state[12];
  temp[14] = state[13];
  temp[15] = state[14];

  memcpy(state, temp, 16*sizeof(uint8_t));

}

void inverse_shift_row(uint8_t* state)
{

  uint8_t temp[16];
  int i;
  for(i = 0;i < 4;i++)
    temp[i] = state[i];

  temp[5] = state[4];
  temp[6] = state[5];
  temp[7] = state[6];
  temp[4] = state[7];

  temp[10] = state[8];
  temp[11] = state[9];
  temp[8] = state[10];
  temp[9] = state[11];

  temp[15] = state[12];
  temp[12] = state[13];
  temp[13] = state[14];
  temp[14] = state[15];

  memcpy(state, temp, 16*sizeof(uint8_t));

}

void right_rotation(uint8_t* bits, int rotate) {
    if (rotate != 0) {
        uint8_t temp = bits[15];
        for (int i = 15; i > 0; i--) {
            bits[i] = bits[i - 1];
        }
        bits[0] = temp;
        right_rotation(bits, rotate - 1);
    }
}

void left_rotation(uint8_t* bits, int rotate) {
    if (rotate != 0) {
        uint8_t temp = bits[0];
        for (int i = 0; i < 16; i++) {
            bits[i] = bits[i + 1];
        }
        bits[15] = temp;
        left_rotation(bits, rotate - 1);
    }
}

void key_scheduling(uint8_t* key, uint8_t* round_key) {
    for (int i = 0; i < 16; i++) {
        round_key[i] = key[i];
    }
    for (int i = 0; i < 8; i++) {
        round_key[i] = 0;
    }
    
    key[15] ^= 0xff;
    key[14] ^= 0x33;
    key[13] ^= 0x33;
    key[12] ^= 0xff;
    right_rotation(key, 4);
}


void subcell(uint8_t *state)
{
  for(int i = 0;i < 16;i++) state[i] = sbox[state[i]];
}

void inverse_subcell(uint8_t *state)
{
  for(int i = 0;i < 16;i++) state[i] = inverse_sbox[state[i]];
}


void print_state(uint8_t *state) {

  for(int i = 0; i < 16;i++) {
    if(i && i%4==0) printf(" ");
    printf("%02x ", state[i]);
  }
  printf("\n");

}



void encrypt(uint8_t *pt,  uint8_t *ct)
{

  uint8_t key[16] = MASTER_KEY;
  uint8_t roundkey[16];
  memset(roundkey, 0, 16*sizeof(uint8_t) );
  

  int nRound = rounds; // Total number of rounds of the cipher
  uint8_t state[16];
  memcpy(state, pt, 16*sizeof(uint8_t));

  uint8_t tk[16];
  memcpy(tk, key, 16*sizeof(uint8_t));
  
  for(int i = 0;i < nRound;i++) {

    memcpy(roundkey, tk, 16*sizeof(uint8_t));
    memset(roundkey, 0, 8*sizeof(uint8_t));
    //printf("round key at round %d\n", i);
    //print_state(roundkey);


    subcell(state);
    shift_row(state);
    mixcol(state);
    
    for(int j = 8;j < 16;j++) state[j] ^= roundkey[j];
    
    tk[12] ^= 0xff; tk[14] ^= 0x33;
    tk[13] ^= 0x33; tk[15] ^= 0xff;    // k[i]
    uint8_t temp[16];
    memcpy(temp, tk, 16*sizeof(uint8_t));
    for(int j = 15;j >= 4; j--) tk[j] = temp[j-4];
    tk[0] = temp[12]; tk[1] = temp[13];
    tk[2] = temp[14]; tk[3] = temp[15];
  }

  memcpy(ct, state, 16*sizeof(uint8_t));

  //print_state(state);
}

#define empty_array {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
void decrypt(uint8_t *ct,  uint8_t *pt) {
  uint8_t roundkey[16];
  uint8_t key[16] = MASTER_KEY;
  memset(roundkey, 0, 16*sizeof(uint8_t) );
  
  int nRound = rounds; // Total number of rounds of the cipher
  uint8_t state[16];
  memcpy(state, ct, 16*sizeof(uint8_t));

  uint8_t round_keys[4][16] = {empty_array, empty_array, empty_array, empty_array};

  for (int i = 0; i < 4; i++)
  {
    key_scheduling(key, roundkey);
    for (int j = 0; j < 16; j++)
    {
      round_keys[i][j] = roundkey[j];
    }
    
  }
  
  for (int l = nRound; l > 0; l--)
  {
    for (int j = 8; j < 16; j++)
    {
      state[j] ^= round_keys[l - 1][j];
    }
    //printf("round key at round %d\n", l);
    //print_state(round_keys[l - 1]);
    inverse_mixcol(state);

    inverse_shift_row(state);

    inverse_subcell(state);


    memcpy(pt, state, 16*sizeof(uint8_t));
    
  }
  

}
